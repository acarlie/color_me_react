{"version":3,"sources":["styles/modules/Heading.module.scss","styles/modules/Utility.module.scss","components/Modal/Modal.module.scss","App.module.scss","styles/modules/Grid.module.scss","components/Button/Button.module.scss","components/Letter/Letter.module.scss","components/Letter/Letter.js","components/Button/Button.js","components/Modal/Modal.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Letter","props","className","heading","main","styles","letter","aria-label","guessed","Button","setFocus","buttonRef","current","focus","React","createRef","id","this","ref","button","fullWidth","full_width","onClick","handler","children","Component","Modal","openDialog","setState","open","setBodyStyle","closeDialog","onClose","closeHandler","e","preventDefault","target","isOpen","body","style","height","overflow","state","document","getElementsByTagName","scrim","closed","role","aria-labelledby","aria-describedby","modal","small","title","desc","footer","close","App","newGame","arr","setPuzzle","remaining","incorrectArr","correctArr","guess","win","Math","round","random","length","name","hint","colorMain","colorTwo","puzzle","toLowerCase","puzzleArr","Set","split","puzzlesArr","filter","x","colors","setUnique","includes","concat","finalWin","modalRef","wins","lose","resetGame","handleChange","event","value","onFormSubmit","loaded","loader","notification","utility","sr_only","aria-live","wrapper","grid","container","map","i","form","onSubmit","for","input","type","placeholder","maxlength","onChange","guesses","join","results","inline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c7f0bb9d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Heading_main__3WHUQ\",\"small\":\"Heading_small__zVvOA\",\"inline\":\"Heading_inline__3jimz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sr_only\":\"Utility_sr_only__1YItD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__3cs5L\",\"scrim\":\"Modal_scrim__1ntFf\",\"inner\":\"Modal_inner__3TjeU\",\"desc\":\"Modal_desc__39bg6\",\"footer\":\"Modal_footer__3ZIb3\",\"open\":\"Modal_open__tYwV2\",\"closed\":\"Modal_closed__2WW_T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__39iUu\",\"wrapper\":\"App_wrapper__2HSJy\",\"guesses\":\"App_guesses__JByFV\",\"input\":\"App_input__1lqRC\",\"title\":\"App_title__2Epl2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Grid_container__2e0lC\",\"heading\":\"Grid_heading__2xXwo\",\"results\":\"Grid_results__1zOZU\",\"form\":\"Grid_form__2E4p2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1rzV-\",\"full_width\":\"Button_full_width__2umJR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"letter\":\"Letter_letter__3gQIV\"};","import React from 'react';\r\n// import styles from './Letter.module.scss';\r\nimport styles from './Letter.module.scss';\r\nimport heading from './../../styles/modules/Heading.module.scss';\r\n\r\nfunction Letter(props) {\r\n    return (\r\n        <span className={`${heading.main} ${styles.letter}`} aria-label={props.guessed ? null : 'blank'}>\r\n            {\r\n                props.guessed &&\r\n                props.letter\r\n            }\r\n            {\r\n                !props.guessed &&\r\n                '_'\r\n            }\r\n        </span>\r\n    );\r\n}\r\n\r\nexport default Letter;\r\n","import React, { Component } from 'react';\r\nimport styles from './Button.module.scss';\r\n\r\nclass Button extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.buttonRef = React.createRef();\r\n    }\r\n\r\n    /**\r\n     * setFocus can be accessed by parent to set focus on button\r\n     */\r\n    setFocus = () => {\r\n        this.buttonRef.current.focus();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <button id={this.props.id ? this.props.id : null} ref={this.buttonRef} className={`${styles.button} ${this.props.fullWidth ? styles.full_width : ''}`} onClick={this.props.handler}>\r\n                {this.props.children}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Button;\r\n","import React, { Component } from 'react';\r\nimport styles from './Modal.module.scss';\r\nimport heading from './../../styles/modules/Heading.module.scss';\r\nimport Button from './../Button/Button';\r\n\r\nclass Modal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            open: false\r\n        };\r\n        this.buttonRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.body = document.getElementsByTagName('body')[0];\r\n    }\r\n\r\n    openDialog = () => {\r\n        this.setState({\r\n            open: true\r\n        }, () => {\r\n            this.buttonRef.current.setFocus();\r\n            this.setBodyStyle(true);\r\n        });\r\n    }\r\n\r\n    closeDialog = () => {\r\n        this.setState({\r\n            open: false\r\n        }, () => {\r\n            this.props.onClose();\r\n            this.setBodyStyle(false);\r\n        });\r\n    }\r\n\r\n    closeHandler = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (e.target.id === 'scrim' || e.target.id === 'close') {\r\n            this.closeDialog();\r\n        }\r\n    }\r\n\r\n    setBodyStyle = (isOpen) => {\r\n        if (isOpen) {\r\n            this.body.style.height = '100%';\r\n            this.body.style.overflow = 'hidden';\r\n        } else {\r\n            this.body.style = '';\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"scrim\" className={`${styles.scrim} ${this.state.open ? styles.open : styles.closed}`} onClick={(e) => this.closeHandler(e)}>\r\n                <div id=\"dialog\" role=\"dialog\" aria-labelledby=\"title\" aria-describedby=\"description\" className={`${styles.modal} ${this.state.open ? styles.open : styles.closed}`}>\r\n                    <h2 id=\"title\" className={heading.small}>\r\n                        {this.props.title}\r\n                    </h2>\r\n                    <p id=\"description\" className={styles.desc}>\r\n                        {this.props.children}\r\n                    </p>\r\n                    <div className={styles.footer}>\r\n                        <Button id=\"close\" onClick={(e) => this.closeHandler(e)} ref={this.buttonRef} fullWidth>{this.props.close}</Button>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Modal;\r\n","import React, { Component } from 'react';\n\n/**\n * Data\n */\nimport { colors } from './data/test-data.json';\n\n/**\n * Components\n */\nimport Letter from './components/Letter/Letter';\n\n/**\n * Styles\n */\nimport styles from './App.module.scss';\nimport utility from './styles/modules/Utility.module.scss';\nimport heading from './styles/modules/Heading.module.scss';\nimport grid from './styles/modules/Grid.module.scss';\n\nimport Modal from './components/Modal/Modal';\n// import text from './styles/modules/Text.module.scss';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hint: '',\n            loaded: false,\n            loader: '',\n            notification: 'You won the round',\n            remaining: 5,\n            incorrectArr: [],\n            correctArr: [],\n            wins: 0,\n            guess: '',\n            puzzle: '',\n            colors: {},\n            puzzleArr: [],\n            puzzlesArr: [],\n            win: false\n        };\n        this.modalRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.newGame(colors);\n    }\n\n    newGame = (arr) => {\n        this.setState({\n            ...this.setPuzzle(arr),\n            remaining: 5,\n            incorrectArr: [],\n            correctArr: [],\n            guess: '',\n            win: false\n        });\n    }\n\n    setPuzzle = (arr) => {\n        const num = Math.round(Math.random() * (arr.length - 1));\n        const { name, hint, colorMain, colorTwo } = arr[num];\n        const puzzle = name.toLowerCase();\n        const puzzleArr = [...new Set(puzzle.split(''))];\n        const puzzlesArr = arr.filter(x => x.name !== puzzle);\n        const colors = { colorMain, colorTwo };\n\n        return { puzzle, puzzleArr, puzzlesArr, hint, colors };\n    }\n\n    // colorChange (color, change) {\n    //     var oldColorRGB = color.split(',');\n    //     var newColorRGB = [];\n    //     oldColorRGB.forEach(function (i) {\n    //       newColorRGB.push(Math.round(parseInt(i) * change));\n    //     });\n    //     return 'rgb(' + newColorRGB.toString() + ')';\n    //   },\n    //   styles (colorOne, colorTwo, colorThree, colorFour) {\n    //     // main background\n    //     this.body.style.background = 'linear-gradient(to right,' + colorOne + ',' + colorTwo + ')';\n    //     // h1 text shadow\n    //     this.headingText.style.textShadow = '2px 4px 6px ' + colorTwo;\n    //     // result container\n    //     this.resultsCont.style.boxShadow = '1px 3px 16px ' + colorTwo + ' inset, -2px -2px 8px ' + colorOne + ', 2px 1px 2px ' + colorOne;\n    //     this.resultsCont.style.color = colorFour;\n    //     this.resultsCont.style.backgroundColor = colorThree;\n    //     // borders in result container\n    //     this.border.forEach(function (i) {\n    //       i.style.borderTop = '1.5px solid ' + colorTwo;\n    //     });\n    //   },\n\n    setUnique = (guess, arr) => {\n        if (!arr.includes(guess)) {\n            return arr.concat(guess);\n        }\n\n        return arr;\n    }\n\n    finalWin = () => {\n        this.setState({\n            win: true\n        }, () => {\n            this.modalRef.current.openDialog();\n        });\n    }\n\n    win = () => {\n        this.setState({\n            wins: this.state.wins + 1\n        });\n        this.newGame(this.state.puzzlesArr);\n    }\n\n    lose = () => {\n        this.modalRef.current.openDialog();\n    }\n\n    resetGame = () => {\n        this.setState({\n            puzzlesArr: colors\n        }, () => {\n            this.newGame(this.state.puzzlesArr);\n        });\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            guess: event.target.value.toLowerCase()\n        });\n    }\n\n    onFormSubmit = (e) => {\n        e.preventDefault();\n        const { guess } = this.state;\n\n        if (this.state.puzzleArr.includes(guess)) {\n            const correctArr = this.setUnique(guess, this.state.correctArr);\n\n            this.setState({\n                correctArr,\n                guess: ''\n            });\n\n            if (correctArr.length === this.state.puzzleArr.length) {\n                if (this.state.puzzlesArr.length === 0) {\n                    this.finalWin();\n                } else {\n                    this.win();\n                }\n            }\n        } else {\n            const incorrectArr = this.setUnique(guess, this.state.incorrectArr);\n            const remaining = this.state.incorrectArr.includes(guess) ? this.state.remaining : this.state.remaining - 1;\n\n            if (remaining === -1) {\n                this.lose();\n            } else {\n                this.setState({\n                    remaining,\n                    incorrectArr,\n                    guess: ''\n                });\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <header className={utility.sr_only}>\n                    <h1>Color me</h1>\n                </header>\n                <main className={styles.main}>\n                    <section className={utility.sr_only}>\n                        <h2>About color me</h2>\n                        <p>\n                            Color me is a word guessing game. The words are all color names. A hint about the color family will be given at the beginning of each round. Use the input box to guess a letter, the blanks will fill as correct guesses are made. After the round is finished a new round will start until there are no puzzles remaining.\n                        </p>\n                    </section>\n                    <section>\n                        <Modal ref={this.modalRef} onClose={this.resetGame} title=\"Modal title\" close=\"Close modal\">\n                            Content\n                        </Modal>\n                        <h2 className={utility.sr_only}>The game</h2>\n\n                        <div className={utility.sr_only} aria-live=\"polite\" role=\"status\">\n                            {\n                                this.state.notification &&\n                                `Notification: ${this.state.notification}`\n                            }\n                        </div>\n                        <div className={utility.sr_only} aria-live=\"polite\" role=\"status\">\n                            {\n                                this.state.hint &&\n                                `Hint: ${this.state.hint}`\n                            }\n                        </div>\n\n                        {/* <div id=\"loaderWrapper\" class=\"fixed-wrap\">\n                            <div class=\"container-fullwidth\">\n                                <span id=\"loadText\" class=\"inset\">Loading</span>\n                            </div>\n                        </div>\n\n                        <div id=\"finalWrapper\" class=\"fixed-wrap\">\n\n                        </div> */}\n                        <div className={styles.wrapper}>\n                            <div className={grid.container}>\n                                <div className={grid.heading}>\n                                    <h3 className={heading.main} aria-live=\"polite\" role=\"status\">\n                                        <span className={styles.title}>Color Me</span>\n                                        <span className={styles.title}>\n                                            {\n                                                this.state.puzzle &&\n                                                this.state.puzzle.split('').map((letter, i) => {\n                                                    return <Letter key={i} letter={letter} guessed={this.state.correctArr.includes(letter)} />;\n                                                })\n                                            }\n                                            .\n                                        </span>\n                                    </h3>\n                                </div>\n                                <div className={grid.form}>\n                                    <form onSubmit={(e) => this.onFormSubmit(e)} className={styles.form}>\n                                        <label className={utility.sr_only} for=\"input\">Guess a letter</label>\n                                        <input id=\"input\" className={styles.input} type=\"text\" placeholder=\"Guess a letter...\" maxlength=\"1\" value={this.state.guess} onChange={this.handleChange} />\n                                        <input className={utility.sr_only} type=\"submit\" value=\"Submit guess\" />\n                                    </form>\n                                    <div className={styles.guesses}>\n                                        <h4 className={utility.sr_only}>Guessed letters:</h4>\n                                        {\n                                            this.state.incorrectArr.length > 0 &&\n                                            this.state.incorrectArr.join(' ')\n                                        }\n                                    </div>\n                                </div>\n\n                                <div className={grid.results}>\n                                    <div><h4 className={`${heading.small} ${heading.inline}`}>Guesses: </h4> {this.state.remaining}</div>\n                                    <div><h4 className={`${heading.small} ${heading.inline}`}>Wins: </h4> {this.state.wins}</div>\n                                </div>\n                            </div>\n                        </div>\n\n                    </section>\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}