{"version":3,"sources":["styles/modules/Utility.module.scss","styles/modules/Heading.module.scss","components/Modal/Modal.module.scss","components/Game/Game.module.scss","styles/modules/Grid.module.scss","components/Form/Form.module.scss","components/Button/Button.module.scss","components/Letter/Letter.module.scss","App.module.scss","components/Button/Button.js","components/Modal/Modal.js","components/Letter/Letter.js","components/Game/Game.js","components/Form/Form.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Button","props","setFocus","buttonRef","current","focus","React","createRef","id","this","ref","className","styles","button","fullWidth","full_width","onClick","handler","children","Component","Modal","openDialog","setState","open","setBodyStyle","closeDialog","onClose","closeHandler","e","preventDefault","target","isOpen","body","style","height","overflow","state","document","getElementsByTagName","scrim","closed","role","aria-labelledby","aria-describedby","modal","heading","small","title","desc","footer","close","Letter","main","letter","aria-label","guessed","Game","wrapper","grid","container","dynamicStyles","aria-live","puzzle","split","map","i","correctArr","includes","form","guesses","utility","sr_only","color","inset","incorrectArr","length","join","stats","stat","inline","remaining","wins","Form","handleChange","event","guess","value","toLowerCase","onFormSubmit","submitHandler","autoComplete","onSubmit","htmlFor","input","type","placeholder","maxLength","onChange","App","newGame","arr","setPuzzle","win","Math","round","random","name","hint","colorMain","colorTwo","puzzleArr","Set","puzzlesArr","filter","x","colors","adjustRGB","colorStr","change","oldColorRGB","newColorRGB","forEach","push","parseInt","toString","setUnique","concat","finalWin","modalRef","lose","resetGame","loaded","loader","notification","background","textShadow","boxShadow","divider","borderTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.542f5e73.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"sr_only\":\"Utility_sr_only__1YItD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Heading_main__3WHUQ\",\"small\":\"Heading_small__zVvOA\",\"inline\":\"Heading_inline__3jimz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__3cs5L\",\"scrim\":\"Modal_scrim__1ntFf\",\"inner\":\"Modal_inner__3TjeU\",\"desc\":\"Modal_desc__39bg6\",\"footer\":\"Modal_footer__3ZIb3\",\"open\":\"Modal_open__tYwV2\",\"closed\":\"Modal_closed__2WW_T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Game_wrapper__4Ol9f\",\"guesses\":\"Game_guesses__75iga\",\"title\":\"Game_title__3oCe4\",\"stat\":\"Game_stat__1niRy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Grid_container__2e0lC\",\"heading\":\"Grid_heading__2xXwo\",\"stats\":\"Grid_stats__-2D4g\",\"form\":\"Grid_form__2E4p2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Form_input__1vcfR\",\"inset\":\"Form_inset__29Gru\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1rzV-\",\"full_width\":\"Button_full_width__2umJR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"letter\":\"Letter_letter__3gQIV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__2HSJy\",\"guesses\":\"App_guesses__JByFV\",\"input\":\"App_input__1lqRC\",\"title\":\"App_title__2Epl2\",\"stat\":\"App_stat__3XN0U\"};","import React, { Component } from 'react';\r\nimport styles from './Button.module.scss';\r\n\r\nclass Button extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.buttonRef = React.createRef();\r\n    }\r\n\r\n    /**\r\n     * setFocus can be accessed by parent to set focus on button\r\n     */\r\n    setFocus = () => {\r\n        this.buttonRef.current.focus();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <button id={this.props.id ? this.props.id : null} ref={this.buttonRef} className={`${styles.button} ${this.props.fullWidth ? styles.full_width : ''}`} onClick={this.props.handler}>\r\n                {this.props.children}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Button;\r\n","import React, { Component } from 'react';\r\nimport styles from './Modal.module.scss';\r\nimport heading from './../../styles/modules/Heading.module.scss';\r\nimport Button from './../Button/Button';\r\n\r\nclass Modal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            open: false\r\n        };\r\n        this.buttonRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.body = document.getElementsByTagName('body')[0];\r\n    }\r\n\r\n    openDialog = () => {\r\n        this.setState({\r\n            open: true\r\n        }, () => {\r\n            this.buttonRef.current.setFocus();\r\n            this.setBodyStyle(true);\r\n        });\r\n    }\r\n\r\n    closeDialog = () => {\r\n        this.setState({\r\n            open: false\r\n        }, () => {\r\n            this.props.onClose();\r\n            this.setBodyStyle(false);\r\n        });\r\n    }\r\n\r\n    closeHandler = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (e.target.id === 'scrim' || e.target.id === 'close') {\r\n            this.closeDialog();\r\n        }\r\n    }\r\n\r\n    setBodyStyle = (isOpen) => {\r\n        if (isOpen) {\r\n            this.body.style.height = '100%';\r\n            this.body.style.overflow = 'hidden';\r\n        } else {\r\n            this.body.style = '';\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"scrim\" className={`${styles.scrim} ${this.state.open ? styles.open : styles.closed}`} onClick={(e) => this.closeHandler(e)}>\r\n                <div id=\"dialog\" role=\"dialog\" aria-labelledby=\"title\" aria-describedby=\"description\" className={`${styles.modal} ${this.state.open ? styles.open : styles.closed}`}>\r\n                    <h2 id=\"title\" className={heading.small}>\r\n                        {this.props.title}\r\n                    </h2>\r\n                    <p id=\"description\" className={styles.desc}>\r\n                        {this.props.children}\r\n                    </p>\r\n                    <div className={styles.footer}>\r\n                        <Button id=\"close\" onClick={(e) => this.closeHandler(e)} ref={this.buttonRef} fullWidth>{this.props.close}</Button>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Modal;\r\n","import React from 'react';\r\n\r\nimport styles from './Letter.module.scss';\r\nimport heading from './../../styles/modules/Heading.module.scss';\r\n\r\nfunction Letter(props) {\r\n    return (\r\n        <span className={`${heading.main} ${styles.letter}`} aria-label={props.guessed ? null : 'blank'}>\r\n            {\r\n                props.guessed &&\r\n                props.letter\r\n            }\r\n            {\r\n                !props.guessed &&\r\n                '_'\r\n            }\r\n        </span>\r\n    );\r\n}\r\n\r\nexport default Letter;\r\n","import React from 'react';\r\nimport Letter from './../Letter/Letter';\r\n\r\n/**\r\n * Styles\r\n */\r\nimport styles from './Game.module.scss';\r\nimport utility from './../../styles/modules/Utility.module.scss';\r\nimport heading from './../../styles/modules/Heading.module.scss';\r\nimport grid from './../../styles/modules/Grid.module.scss';\r\n\r\n/**\r\n * @param {*} props\r\n * props.dynamicStyles: Dynamic styles object\r\n * props.puzzle: Current puzzle string\r\n * props.incorrectArr: Array of incorrect letters\r\n * props.correctArr: Array of correct letters\r\n * props.wins: Number of wins\r\n * props.remaining: Number of remaining guesses\r\n * props.children: Form component\r\n */\r\n\r\nfunction Game(props) {\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className={grid.container}>\r\n                <div className={grid.heading}>\r\n                    <h3 className={heading.main} style={props.dynamicStyles.heading} aria-live=\"polite\" role=\"status\">\r\n                        <span className={styles.title}>Color Me</span>\r\n                        <span className={styles.title}>\r\n                            {\r\n                                props.puzzle &&\r\n                                props.puzzle.split('').map((letter, i) => {\r\n                                    return <Letter key={i} letter={letter} guessed={props.correctArr.includes(letter)} />;\r\n                                })\r\n                            }\r\n                            .\r\n                        </span>\r\n                    </h3>\r\n                </div>\r\n                <div className={grid.form}>\r\n                    {/* Form */}\r\n                    {props.children}\r\n\r\n                    <div className={styles.guesses}>\r\n                        <h4 className={utility.sr_only} style={{ color: props.dynamicStyles.inset.color }}>Guessed letters:</h4>\r\n                        {\r\n                            props.incorrectArr.length > 0 &&\r\n                            props.incorrectArr.join(' ')\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={grid.stats} style={props.dynamicStyles.inset}>\r\n                    <div className={styles.stat}><h4 className={`${heading.small} ${heading.inline}`}>Guesses: </h4> {props.remaining}/5</div>\r\n                    <div className={styles.stat}><h4 className={`${heading.small} ${heading.inline}`}>Wins: </h4> {props.wins}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Game;\r\n","import React, { Component } from 'react';\r\nimport styles from './Form.module.scss';\r\nimport utility from './../../styles/modules/Utility.module.scss';\r\n\r\nclass Form extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            guess: ''\r\n        };\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            guess: event.target.value.toLowerCase()\r\n        });\r\n    }\r\n\r\n    onFormSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.submitHandler(this.state.guess);\r\n        this.setState({\r\n            guess: ''\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form autoComplete=\"off\" onSubmit={(e) => this.onFormSubmit(e)} className={styles.form}>\r\n                <label className={utility.sr_only} htmlFor=\"input\">Guess a letter</label>\r\n                <div className={styles.inset} style={this.props.dynamicStyles.inset}>\r\n                    <input id=\"input\" className={styles.input} type=\"text\" placeholder=\"Guess a letter...\" maxLength=\"1\" value={this.state.guess} onChange={this.handleChange} />\r\n                </div>\r\n                <input className={utility.sr_only} type=\"submit\" value=\"Submit guess\" />\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from 'react';\n\n/**\n * Data\n */\nimport { colors } from './data/test-data.json';\n\n/**\n * Components\n */\nimport Modal from './components/Modal/Modal';\nimport Game from './components/Game/Game';\nimport Form from './components/Form/Form';\n\n/**\n * Styles\n */\nimport styles from './App.module.scss';\nimport utility from './styles/modules/Utility.module.scss';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hint: '',\n            loaded: false,\n            loader: '',\n            notification: 'You won the round',\n            remaining: 5,\n            incorrectArr: [],\n            correctArr: [],\n            wins: 0,\n            puzzle: '',\n            colors: {},\n            puzzleArr: [],\n            puzzlesArr: [],\n            win: false\n        };\n        this.modalRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.newGame(colors);\n    }\n\n    newGame = (arr) => {\n        this.setState({\n            ...this.setPuzzle(arr),\n            remaining: 5,\n            incorrectArr: [],\n            correctArr: [],\n            guess: '',\n            win: false\n        });\n    }\n\n    setPuzzle = (arr) => {\n        const num = Math.round(Math.random() * (arr.length - 1));\n        const { name, hint, colorMain, colorTwo } = arr[num];\n        const puzzle = name.toLowerCase();\n        const puzzleArr = [...new Set(puzzle.split(''))];\n        const puzzlesArr = arr.filter(x => x.name !== puzzle);\n        const colors = { colorMain, colorTwo };\n\n        return { puzzle, puzzleArr, puzzlesArr, hint, colors };\n    }\n\n    adjustRGB = (colorStr, change) => {\n        const oldColorRGB = colorStr.split(',');\n        const newColorRGB = [];\n        oldColorRGB.forEach(function (i) {\n            newColorRGB.push(Math.round(parseInt(i) * change));\n        });\n        return 'rgb(' + newColorRGB.toString() + ')';\n    }\n\n    setUnique = (guess, arr) => {\n        if (!arr.includes(guess)) {\n            return arr.concat(guess);\n        }\n\n        return arr;\n    }\n\n    finalWin = () => {\n        this.setState({\n            win: true\n        }, () => {\n            this.modalRef.current.openDialog();\n        });\n    }\n\n    win = () => {\n        this.setState({\n            wins: this.state.wins + 1\n        });\n        this.newGame(this.state.puzzlesArr);\n    }\n\n    lose = () => {\n        this.modalRef.current.openDialog();\n    }\n\n    resetGame = () => {\n        this.setState({\n            puzzlesArr: colors\n        }, () => {\n            this.newGame(this.state.puzzlesArr);\n        });\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            guess: event.target.value.toLowerCase()\n        });\n    }\n\n    onFormSubmit = (guess) => {\n        if (this.state.puzzleArr.includes(guess)) {\n            const correctArr = this.setUnique(guess, this.state.correctArr);\n\n            this.setState({\n                correctArr\n            });\n\n            if (correctArr.length === this.state.puzzleArr.length) {\n                if (this.state.puzzlesArr.length === 0) {\n                    this.finalWin();\n                } else {\n                    this.win();\n                }\n            }\n        } else {\n            const incorrectArr = this.setUnique(guess, this.state.incorrectArr);\n            const remaining = this.state.incorrectArr.includes(guess) ? this.state.remaining : this.state.remaining - 1;\n\n            if (remaining === -1) {\n                this.lose();\n            } else {\n                this.setState({\n                    remaining,\n                    incorrectArr\n                });\n            }\n        }\n    }\n\n    render() {\n        const dynamicStyles = {\n            background: { background: `linear-gradient(to right, rgb(${this.state.colors.colorMain}), rgb(${this.state.colors.colorTwo}))` },\n            heading: { textShadow: `2px 4px 8px ${this.state.colors.colorTwo ? this.adjustRGB(this.state.colors.colorTwo, 0.8) : 'rgb(' + this.state.colors.colorTwo + ')'}` },\n            inset: {\n                boxShadow: `1px 3px 16px rgb(${this.state.colors.colorTwo}) inset, -2px -2px 8px rgb(${this.state.colors.colorMain}), 2px 1px 2px rgb(${this.state.colors.colorMain})`,\n                background: `rgba(${this.state.colors.colorTwo}, .25)`,\n                color: this.state.colors.colorTwo ? this.adjustRGB(this.state.colors.colorTwo, 0.5) : 'rgba(0,0,0,.6)',\n                '--dynamic-color-dark': this.state.colors.colorTwo ? this.adjustRGB(this.state.colors.colorTwo, 0.5) : 'rgba(0,0,0,.6)'\n            },\n            divider: {\n                borderTop: `1.5px solid rgb(${this.state.colors.colorTwo})`\n            }\n        };\n\n        return (\n            <div>\n                <header className={utility.sr_only}>\n                    <h1>Color me</h1>\n                </header>\n                <main className={styles.main} style={{ ...dynamicStyles.background }}>\n                    <section className={utility.sr_only}>\n                        <h2>About color me</h2>\n                        <p>\n                            Color me is a word guessing game. The words are all color names. A hint about the color family will be given at the beginning of each round. Use the input box to guess a letter, the blanks will fill as correct guesses are made. After the round is finished a new round will start until there are no puzzles remaining.\n                        </p>\n                    </section>\n                    <section>\n                        <Modal ref={this.modalRef} onClose={this.resetGame} title=\"Modal title\" close=\"Close modal\">\n                            Content\n                        </Modal>\n                        <h2 className={utility.sr_only}>The game</h2>\n\n                        <div className={utility.sr_only} aria-live=\"polite\" role=\"status\">\n                            {\n                                this.state.notification &&\n                                `Notification: ${this.state.notification}`\n                            }\n                        </div>\n                        <div className={utility.sr_only} aria-live=\"polite\" role=\"status\">\n                            {\n                                this.state.hint &&\n                                `Hint: ${this.state.hint}`\n                            }\n                        </div>\n\n                        {/* <div id=\"loaderWrapper\" class=\"fixed-wrap\">\n                            <div class=\"container-fullwidth\">\n                                <span id=\"loadText\" class=\"inset\">Loading</span>\n                            </div>\n                        </div>\n\n                        <div id=\"finalWrapper\" class=\"fixed-wrap\">\n\n                        </div> */}\n                        <Game\n                            dynamicStyles={dynamicStyles}\n                            puzzle={this.state.puzzle}\n                            incorrectArr={this.state.incorrectArr}\n                            correctArr={this.state.correctArr}\n                            wins={this.state.wins}\n                            remaining={this.state.remaining}>\n                            <Form submitHandler={this.onFormSubmit} dynamicStyles={dynamicStyles}></Form>\n                        </Game>\n\n                    </section>\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}