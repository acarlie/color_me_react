{"version":3,"sources":["styles/modules/Utility.module.scss","App.module.scss","styles/modules/Heading.module.scss","components/Letter/Letter.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Letter","props","className","styles","letter","aria-label","guessed","App","setPuzzle","puzzle","puzzleArr","Set","split","setState","checkGuess","guess","setUnique","arr","includes","concat","handleChange","event","target","value","onFormSubmit","e","preventDefault","console","log","guessesArr","state","correctArr","length","incorrectArr","remaining","hint","loaded","loader","notification","wins","this","colors","name","utility","sr_only","main","aria-live","role","class","heading","map","i","onSubmit","for","id","type","placeholder","maxlength","onChange","results","join","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ee1b0f9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"sr_only\":\"Utility_sr_only__1YItD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__39iUu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Heading_main__3WHUQ\",\"small\":\"Heading_small__zVvOA\"};","import React from 'react';\r\nimport styles from './Letter.module.scss';\r\n\r\nfunction Letter(props) {\r\n    return (\r\n        <span className={styles.letter} aria-label={props.guessed ? null : 'blank'}>\r\n            {\r\n                props.guessed &&\r\n                props.letter\r\n            }\r\n            {\r\n                !props.guessed &&\r\n                '_'\r\n            }\r\n        </span>\r\n    );\r\n}\r\n\r\nexport default Letter;\r\n","import React, { Component } from 'react';\n\n/**\n * Data\n */\nimport { colors } from './data/colors.json';\n\n/**\n * Components\n */\nimport Letter from './components/Letter/Letter.js';\n\n/**\n * Styles\n */\nimport styles from './App.module.scss';\nimport utility from './styles/modules/Utility.module.scss';\nimport heading from './styles/modules/Heading.module.scss';\n// import text from './styles/modules/Text.module.scss';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hint: 'The color family is purple',\n            loaded: false,\n            loader: '',\n            notification: 'You won the round',\n            remaining: 5,\n            incorrectArr: [],\n            correctArr: [],\n            wins: 0,\n            guess: '',\n            guessesArr: [],\n            puzzle: '',\n            puzzleArr: []\n        };\n    }\n\n    setPuzzle = (puzzle) => {\n        const puzzleArr = [...new Set(puzzle.split(''))];\n        this.setState({\n            puzzle,\n            puzzleArr\n        });\n    }\n\n    checkGuess = (guess) => {\n        // this.state.\n    }\n\n    setUnique = (guess, arr) => {\n        if (!arr.includes(guess)) {\n            return arr.concat(guess);\n        }\n\n        return arr;\n    }\n\n    componentDidMount() {\n        this.setPuzzle(colors[0].name);\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            guess: event.target.value\n        });\n    }\n\n    onFormSubmit = (e) => {\n        e.preventDefault();\n        console.log('submit');\n        const guessesArr = this.setUnique(this.state.guess, this.state.guessesArr);\n        if (this.state.puzzleArr.includes(this.state.guess)) {\n            // Correct guess\n            const correctArr = this.setUnique(this.state.guess, this.state.correctArr);\n\n            if (correctArr.length === this.state.puzzleArr.length) {\n                // win\n                console.log('WINNNN!!!');\n                // reset\n            } else {\n                this.setState({\n                    guessesArr,\n                    correctArr,\n                    guess: ''\n                });\n            }\n        } else {\n            // Incorrect guess\n            const incorrectArr = this.setUnique(this.state.guess, this.state.incorrectArr);\n            const remaining = this.state.incorrectArr.includes(this.state.guess) ? this.state.remaining : this.state.remaining - 1;\n            console.log(this.state.incorrectArr.includes(this.state.guess));\n            if (remaining === -1) {\n                // Lose\n                console.log('Lose');\n                // Reset\n            } else {\n                this.setState({\n                    guessesArr,\n                    remaining,\n                    incorrectArr,\n                    guess: ''\n                });\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <header className={utility.sr_only}>\n                    <h1>Color me</h1>\n                </header>\n                <main className={styles.main}>\n                    <section className={utility.sr_only}>\n                        <h2>About color me</h2>\n                        <p>\n                            Color me is a word guessing game. The words are all color names. A hint about the color family will be given at the beginning of each round. Use the input box to guess a letter, the blanks will fill as correct guessesArr are made. After the round is finished a new round will start until there are no puzzles remaining.\n                        </p>\n                    </section>\n                    <section>\n                        <h2 className={utility.sr_only}>The game</h2>\n\n                        <div className={utility.sr_only} aria-live=\"polite\" role=\"status\">\n                            {\n                                this.state.notification &&\n                                `Notification: ${this.state.notification}`\n                            }\n                        </div>\n                        <div className={utility.sr_only} aria-live=\"polite\" role=\"status\">\n                            {\n                                this.state.hint &&\n                                `Hint: ${this.state.hint}`\n                            }\n                        </div>\n\n                        {/* <div id=\"loaderWrapper\" class=\"fixed-wrap\">\n                            <div class=\"container-fullwidth\">\n                                <span id=\"loadText\" class=\"inset\">Loading</span>\n                            </div>\n                        </div>\n\n                        <div id=\"finalWrapper\" class=\"fixed-wrap\">\n\n                        </div> */}\n                        <div class=\"container\">\n                            <div>\n                                <h3 className={heading.main} aria-live=\"polite\" role=\"status\">\n                                    Color Me\n                                    <span>\n                                        {\n                                            this.state.puzzle &&\n                                            this.state.puzzle.split('').map((letter, i) => {\n                                                return <Letter key={i} letter={letter} guessed={this.state.correctArr.includes(letter)} />;\n                                            })\n                                        }\n                                    </span>\n                                    .\n                                </h3>\n                                <form onSubmit={(e) => this.onFormSubmit(e)}>\n                                    <label className={utility.sr_only} for=\"input\">Guess a letter</label>\n                                    <input id=\"input\" type=\"text\" placeholder=\"Guess a letter...\" maxlength=\"1\" value={this.state.guess} onChange={this.handleChange} />\n                                    <input className={utility.sr_only} type=\"submit\" value=\"Submit guess\" />\n                                </form>\n\n                                <div className={styles.results}>\n                                    <p><strong>Guesses Remaining: </strong>{this.state.remaining}</p>\n                                    <p><strong>Wins: </strong>{this.state.wins}</p>\n                                    <p><strong>Guesses: </strong>\n                                        {\n                                            this.state.incorrectArr.length > 0 &&\n                                            this.state.incorrectArr.join(' ')\n                                        }\n                                    </p>\n                                </div>\n                            </div>\n                        </div>\n\n                    </section>\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}